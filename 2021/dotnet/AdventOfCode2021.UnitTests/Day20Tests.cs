using AzW.AdventOfCode2021.Year2021;
using System.Collections.Generic;
using Xunit;

namespace AdventOfCode2021.UnitTests
{
    public class Day20Tests
    {
        [Theory]
        [InlineData
            (
n\n#..#.\n#....\n##..#\n..#..\n..###",

            new string[] { "10010", "10000", "11001", "00100", "00111" }
            )]
        public void ParseInput(string rawInput, string expectedAlgorithm, IEnumerable<string> expectedImage)
        {
            // Arrange
            var day20 = new Day20();

            // Act
            var result = day20.ParseInput(rawInput);

            // Assert
            Assert.Equal(result.Item1, expectedAlgorithm);
            Assert.Equal(result.Item2, expectedImage);
        }

        [Theory]
        [InlineDatan\n#..#.\n#....\n##..#\n..#..\n..###", "000100010", "1")]        
        public void ResolvePixel(string rawInput, string input, string expectedResult)
        {
            // Arrange
            var day20 = new Day20();
            day20.Input = day20.ParseInput(rawInput);

            // Act
            var result = day20.ResolvePixel(input);

            Assert.Equal(result, expectedResult);
        }

        [Theory]
        [InlineDatan\n#..#.\n#....\n##..#\n..#..\n..###", 35)]
        public void ExecutePart1(string rawInput, long expectedResult)
        {
            // Arrange
            var day20 = new Day20();
            day20.Input = day20.ParseInput(rawInput);

            // Act
            var result = day20.ExecutePart1();

            // Assert
            Assert.Equal(expectedResult, result);
        }
    }
}
